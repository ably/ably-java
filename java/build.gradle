plugins {
    id 'de.fuerstenau.buildconfig' version '1.1.8'
    id 'checkstyle'
    id 'org.gradle.test-retry' version '1.2.0'
}

apply plugin: 'java'
apply plugin: 'idea'
apply from: '../common.gradle'
apply from: 'maven.gradle'

sourceCompatibility = 1.7
targetCompatibility = 1.7

apply from: '../dependencies.gradle'

buildConfig {
    packageName 'io.ably.lib'
    clsName 'BuildConfig'
    buildConfigField 'String', 'LIBRARY_NAME', 'java'
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', '../lib/src/main/java']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java', '../lib/src/test/java']
        }
    }
}

// Default jar: add io.ably classes from :lib dependency.
jar {
    baseName = 'ably-java'
    from {
        configurations.compile.collect { file ->
            file.directory ? file : zipTree(file)
        }
    }
    includes = ['**/io/ably/**']
    includeEmptyDirs false
    exclude 'META-INF/**'
}

// fullJar: add all classes from dependencies transitively.
task fullJar(type: Jar) {
    baseName = 'ably-java'
    classifier = 'full'
    from {
        configurations.compile.collect { file ->
            file.directory ? file : zipTree(file)
        }
    }
    with jar
    exclude 'META-INF/**'
}

assemble.dependsOn fullJar
assembleRelease.dependsOn checkstyleMain

configurations {
    fullConfiguration
    testsConfiguration
}

artifacts {
    fullConfiguration fullJar
}

task testRealtimeSuite(type: Test) {
    filter {
        includeTestsMatching '*RealtimeSuite'
    }
    beforeTest { descriptor ->
        logger.lifecycle("-> $descriptor")
    }
    outputs.upToDateWhen { false }
    testLogging.exceptionFormat = 'full'
    retry {
        maxRetries = 3
        maxFailures = 4
    }
}

task testRestSuite(type: Test) {
    filter {
        includeTestsMatching '*RestSuite'
    }
    beforeTest { descriptor ->
        logger.lifecycle("-> $descriptor")
    }
    outputs.upToDateWhen { false }
    testLogging.exceptionFormat = 'full'
    retry {
        maxRetries = 3
        maxFailures = 4
    }
}

/*
Test task to run pure unit tests, where pure means that they only run
locally and do not need to communicate with Ably servers.
This is achieved by excluding everything in the io.ably.lib.test package,
as it only contains the REST and Realtime suites.
*/
task runUnitTests(type: Test) {
    filter {
        excludeTestsMatching 'io.ably.lib.test.*'
    }
    beforeTest { descriptor ->
        // informational, so we're not flying blind at runtime
        logger.lifecycle("-> $descriptor")
    }

    // force tests to run every time this task is invoked
    outputs.upToDateWhen { false }
}


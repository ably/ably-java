final String MAVEN_USER = findProperty('ossrhUsername')
final String MAVEN_PASSWORD = findProperty('ossrhPassword')

final boolean IS_PUBLISHING_TO_MAVEN_CENTRAL = findProperty('publishTarget') == 'MavenCentral'

if (IS_PUBLISHING_TO_MAVEN_CENTRAL && (MAVEN_USER == null || MAVEN_PASSWORD == null)) {
    throw new GradleException('Either ossrhUsername or ossrhPassword not specified when publishTarget is MavenCentral.')
}

task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.bootClasspath.join(File.pathSeparator))
    failOnError false
    title = 'Ably documentation'
    options.overview = '../overview.html'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
    javadoc.title = 'Ably documentation'
    javadoc.options.overview = '../overview.html'
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                artifactId = 'ably-android'
                from components.release
                artifact sourcesJar
                artifact javadocJar
                pom {
                    name = 'Ably Android client library SDK'
                    description = 'An Android Realtime and REST client library SDK for the Ably platform.'
                    url = 'https://www.github.com/ably/ably-java'
                    packaging = 'aar'
                    inceptionYear = '2015'
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'https://raw.github.com/ably/ably-java/main/LICENSE'
                            distribution = 'repo'
                        }
                    }
                    developers {
                        developer {
                            id = 'ably' // our company org in GitHub: https://github.com/ably
                            name = 'Ably' // UK based company: Ably Real-time Ltd
                            email = 'support@ably.com'
                            url = 'https://ably.com/'
                        }
                    }
                    scm {
                        connection = 'scm:git:git://github.com/ably/ably-java.git'
                        developerConnection = 'scm:git:ssh://github.com/ably/ably-java.git'
                        url = 'https://github.com/ably/ably-java'
                        tag = 'v' + version
                    }
                    organization {
                        name = 'Ably' // UK based company: Ably Real-time Ltd
                        url = 'https://ably.com/'
                    }
                    issueManagement {
                        system = 'Github'
                        url = 'https://github.com/ably/ably-java/issues'
                    }
                }
            }
        }
        repositories {
            maven {
                // change URLs to point to your repos, e.g. http://my.org/repo
                def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
                def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
                def remoteUrl = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

                url = IS_PUBLISHING_TO_MAVEN_CENTRAL ? remoteUrl : layout.buildDirectory.dir("release/${version}")

                if (IS_PUBLISHING_TO_MAVEN_CENTRAL) {
                    credentials {
                        username = MAVEN_USER
                        password = MAVEN_PASSWORD
                    }
                }
            }
        }
    }
}

signing {
    required { true }
    sign publishing.publications
}

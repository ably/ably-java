apply plugin: 'maven'
apply plugin: 'signing'

def groupId = "io.ably"
def artifactId = "ably-android"
def localReleaseDest = "${buildDir}/release/${version}"

uploadArchives {
    repositories.mavenDeployer {
        pom.groupId = groupId
        pom.artifactId = artifactId
        pom.version = version

        // Add other pom properties here if you want (developer details / licenses)
        pom.project {
            name 'Ably Android client library'
            description 'An Android Realtime and REST client library for [Ably.io](https://www.ably.io), the realtime messaging service.'
            packaging 'aar'
            inceptionYear '2015'
            scm {
                url 'scm:git:https://github.com/ably/ably-java'
                connection 'scm:git:https://github.com/ably/ably-java'
                developerConnection 'scm:git:git@github.com:ably/ably-java'
            }
            organization {
                name 'Ably'
                url 'http://ably.io'
            }
            issueManagement {
                system 'Github'
                url 'https://github.com/ably/ably-java/issues'
            }
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'https://raw.github.com/ably/ably-java/master/LICENSE'
                    distribution 'repo'
                }
            }
        }

        pom.whenConfigured {
            p -> p.dependencies = p.dependencies.findAll {
                // Exclude dependency on lib subproject.
                dep -> dep.artifactId != "lib"
            }.findAll {
                // Exclude Google services since we don't want to impose a particular
                // version on users. Ideally we would specify a version range,
                // but the Google services Gradle plugin doesn't seem to
                // support that.
                // TODO: Make sure this works when installing from Maven!
                dep -> dep.artifactId != 'play-services-gcm' && dep.artifactId != 'firebase-messaging'
            }
        }

        // Export files to local storage
        repository(url: "file://${localReleaseDest}")

        // // Export to local Maven cache
        // repository(url: repositories.mavenLocal().url)
    }
}

task zipRelease(type: Zip) {
    from localReleaseDest
    destinationDir buildDir
    archiveName "release-${version}.zip"
}

tasks.whenTaskAdded { task ->
    if (task.name == 'assembleRelease') {
        task.doLast {
            println "Release ${version} can be found at ${localReleaseDest}/"
            println "Release ${version} zipped can be found ${buildDir}/release-${version}.zip"
        }

        task.dependsOn(uploadArchives)
        task.dependsOn(zipRelease)
    }
}

task sourcesJar(type: Jar) {
     classifier = 'sources'
     from android.sourceSets.main.java.srcDirs
}

task javadoc(type: Javadoc) {
     source = android.sourceSets.main.java.srcDirs
     classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
     failOnError false
}

afterEvaluate {
     javadoc.classpath += files(android.libraryVariants.collect { variant ->
         variant.javaCompile.classpath.files
     })
}

task javadocJar(type: Jar, dependsOn: javadoc) {
     classifier = 'javadoc'
     from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}
